import Stream from "../stream";
import CODParser from "./cod-parser";

const codParser = new CODParser();

// prettier-ignore
const encryptedBytes = new Uint8Array([
  0xd3, 0xd3, 0xd3, 0xd3, 0xd3, 0xd3, 0xd3, 0xd3, 0xd3, 0xd3, 0xd3,
  0xd3, 0xd3, 0xd3, 0xd3, 0xd3, 0xd3, 0xd3, 0xf3, 0xf6, 0xa5, 0xb9,
  0xbf, 0xb3, 0xbb, 0xa3, 0xf3, 0xf6, 0xb4, 0x9f, 0x99, 0x9b, 0x8e,
  0xc6, 0xf3, 0xf6, 0x94, 0x9b, 0x9b, 0x8e, 0x94, 0x9b, 0x9b,
  0x8e, 0x94, 0x9b, 0x9b, 0x8e, 0xf3, 0xf6, 0xdb, 0x9c, 0xdb,
  0xdb, 0xe0, 0xad, 0x8c, 0x9b, 0x8b, 0x9b, 0x8e, 0xc6, 0xf3, 0xf6,
]);
const decryptedString =
  "------------------\r\n[GAME]\r\nLager:\r\nleerleerleer\r\n%d%% Steuer:\r\n";

test("Correctly decrypts", async () => {
  expect(codParser.decrypt(new Stream(encryptedBytes))).toBe(decryptedString);
});

test("Correctly encrypts", async () => {
  expect(codParser.encrypt(decryptedString)).toEqual(
    new Buffer(encryptedBytes)
  );
});

test("handles 0 correctly", async () => {
  expect(codParser.decrypt(new Stream(new Uint8Array([0x00])))).toBe("\0");
  expect(codParser.encrypt("\0")).toEqual(new Buffer([0x00]));
});
